version: "2.1"

##############################
### default configurations ###
##############################

# docker logging
x-logging: &logging
  driver: json-file
  options:
    max-size: 5m

# containers restart policy
x-restart: &restart-policy on-failure

# aliases for hosts in docker networks
x-networks:
  api-network:
    - &gateway
      aliases:
        - gateway
    - &timelines
      aliases:
        - timelines
    - &followers
      aliases:
        - followers
  db-network:
    - &api
      aliases:
        - api
    - &db
      aliases:
        - db
    - &admin
      aliases:
        - admin

# node-red is used for two services
x-nodered:
  image: &nodered-image mamosk/nodered:${NODERED_VERSION:-1.1.2}
  build: &nodered-build
    context: ./nodered
    args:
      - &nodered-version NODERED_VERSION=${NODERED_VERSION:-1.1.2}

##########################
### segmented networks ###
##########################
networks:
  # network for backend api access
  gateway_api_network:
  # network for users 'timelines' services
  timelines_api_network:
  timelines_db_network:
  # network for users 'followers' services
  followers_api_network:
  followers_db_network:

###############################
### docker-compose services ###
###############################
services:
  # api gateway service
  api_gateway:
    image: *nodered-image
    container_name: ${KATA}_nodered_gateway
    restart: *restart-policy
    build:
      <<: *nodered-build
      args:
        - *nodered-version
        - KATA_PATH_FLOWS_HOST:./nodered/timelines
    env_file: .env
    environment:
      - TIMELINES_API=http://timelines:1881/api/v1/
      - FOLLOWERS_API=http://followers:8080/api/v1/
    depends_on:
      - timelines_api
      - followers_api
    logging: *logging
    volumes:
      - ./nodered/gateway:/kata/flows
      - /kata/flows/node_modules
    networks:
      gateway_api_network: *gateway
      timelines_api_network: *gateway
      followers_api_network: *gateway
    ports:
      - 11881:1881

  # timelines api service
  timelines_api:
    image: *nodered-image
    container_name: ${KATA}_nodered_timelines
    restart: *restart-policy
    build:
      <<: *nodered-build
      args:
        - *nodered-version
        - KATA_PATH_FLOWS_HOST:./nodered/timelines
    env_file: .env
    environment:
      - INFLUXDB_HOST=db
      # return only messages from last week
      - INFLUXDB_LIMIT_TIME=7d
      # return only last 50 messages per user
      - INFLUXDB_LIMIT_COUNT=50
    depends_on:
      - timelines_db
    logging: *logging
    volumes:
      - ./nodered/timelines:/kata/flows
      - /kata/flows/node_modules
    networks:
      timelines_api_network: *timelines
      timelines_db_network: *api
    ports:
      - 11888:1881

  # timelines db service
  timelines_db:
    image: influxdb:${INFLUXDB_VERSION:-1.8}
    container_name: ${KATA}_influxdb
    restart: *restart-policy
    environment:
      - INFLUXDB_DB=kata
      - INFLUXDB_ADMIN_USER=${INFLUXDB_USERNAME}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_PASSWORD}
    logging: *logging
    volumes:
      - timelines_db_data:/var/lib/influxdb
    networks:
      timelines_db_network: *db
    ports:
      - 18086:8086

  # timeline db admin service
  timelines_db_admin:
    image: chronograf:${CHRONOGRAF_VERSION:-1.8}
    container_name: ${KATA}_chronograf
    restart: *restart-policy
    environment:
      - INFLUXDB_URL=http://db:8086
      - INFLUXDB_USERNAME=${INFLUXDB_USERNAME}
      - INFLUXDB_PASSWORD=${INFLUXDB_PASSWORD}
    depends_on:
      - timelines_db
    logging: *logging
    volumes:
      - timelines_db_admin_data:/var/lib/chronograf
    networks:
      timelines_db_network: *admin
    ports:
      - 127.0.0.1:18888:8888

  # followers api service
  followers_api:
    image: mamosk/openjdk:${JAVA_VERSION:-8u201-jdk-alpine}
    container_name: ${KATA}_java
    restart: *restart-policy
    build:
      context: ./java
      args:
        - JAVA_VERSION=${JAVA_VERSION:-8u201-jdk-alpine}
        - JAVA_CONFIG=${JAVA_CONFIG}
    env_file: .env
    environment:
      - JAVA_OPTS=-Xms32m -Xmx128m
      - POSTGRES_URL=jdbc:postgresql://db:5432/kata
    depends_on:
      - followers_db
    logging: *logging
    volumes:
      - ./java/src/main/resources/application.yml:${JAVA_CONFIG}/application.yml:ro
    networks:
      followers_api_network: *followers
      followers_db_network: *api
    ports:
      - 18080:8080

  # followers db service
  followers_db:
    image: postgres:${POSTGRES_VERSION:-13}
    container_name: ${KATA}_postgres
    restart: *restart-policy
    environment:
      - POSTGRES_DB=kata
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    logging: *logging
    volumes:
      - followers_db_data:/var/lib/postgresql/data/
    networks:
      followers_db_network: *db
    ports:
      - 15432:5432

  # followers db admin service
  followers_db_admin:
    image: dpage/pgadmin4:${PGADMIN_VERSION:-4}
    container_name: ${KATA}_pgadmin
    restart: *restart-policy
    environment:
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_USERNAME}
    depends_on:
      - followers_db
    logging: *logging
    volumes:
      - followers_db_admin_data:/root/.pgadmin
      - ./postgres/servers.json:/pgadmin4/servers.json:ro
    networks:
      followers_db_network: *admin
    ports:
      - 15050:80

########################################
### docker-managed persisted volumes ###
########################################
volumes:
  # volumes for users 'timelines' services
  timelines_db_data:
  timelines_db_admin_data:
  # volumes for users 'followers' services
  followers_db_data:
  followers_db_admin_data:
